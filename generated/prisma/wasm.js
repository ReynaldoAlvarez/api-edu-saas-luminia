
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  price: 'price',
  currency: 'currency',
  studentLimit: 'studentLimit',
  teacherLimit: 'teacherLimit',
  adminLimit: 'adminLimit',
  courseLimit: 'courseLimit',
  aiTeacherCallsMonthly: 'aiTeacherCallsMonthly',
  aiStudentMinutesMonthly: 'aiStudentMinutesMonthly',
  certificateMonthly: 'certificateMonthly',
  virtualClassroomLimit: 'virtualClassroomLimit',
  storageMB: 'storageMB',
  features: 'features',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.InstitutionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  contactEmail: 'contactEmail',
  phone: 'phone',
  address: 'address',
  planId: 'planId',
  settings: 'settings',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.InstitutionSubscriptionScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  planId: 'planId',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  autoRenew: 'autoRenew',
  billingCycle: 'billingCycle',
  createdAt: 'createdAt'
};

exports.Prisma.InstitutionPaymentScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  subscriptionId: 'subscriptionId',
  amount: 'amount',
  currency: 'currency',
  method: 'method',
  status: 'status',
  gatewayData: 'gatewayData',
  reference: 'reference',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  email: 'email',
  password: 'password',
  fullName: 'fullName',
  ci: 'ci',
  phone: 'phone',
  isActive: 'isActive',
  attributes: 'attributes',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  name: 'name',
  description: 'description',
  isSystem: 'isSystem',
  createdAt: 'createdAt'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  isPrimary: 'isPrimary',
  assignedAt: 'assignedAt'
};

exports.Prisma.ABACPolicyScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  name: 'name',
  description: 'description',
  resource: 'resource',
  action: 'action',
  condition: 'condition',
  effect: 'effect',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.CareerScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  name: 'name',
  code: 'code',
  level: 'level',
  description: 'description',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.AcademicPeriodScalarFieldEnum = {
  id: 'id',
  careerId: 'careerId',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  careerId: 'careerId',
  academicPeriodId: 'academicPeriodId',
  name: 'name',
  code: 'code',
  description: 'description',
  credits: 'credits',
  durationSemesters: 'durationSemesters',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.SubjectScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  name: 'name',
  code: 'code',
  description: 'description',
  semester: 'semester',
  credits: 'credits',
  createdAt: 'createdAt'
};

exports.Prisma.VirtualClassroomScalarFieldEnum = {
  id: 'id',
  subjectId: 'subjectId',
  code: 'code',
  title: 'title',
  teacherId: 'teacherId',
  aiEnabled: 'aiEnabled',
  aiConfig: 'aiConfig',
  createdAt: 'createdAt',
  aiagentId: 'aiagentId'
};

exports.Prisma.LessonPlanScalarFieldEnum = {
  id: 'id',
  classroomId: 'classroomId',
  date: 'date',
  topic: 'topic',
  aiSuggestions: 'aiSuggestions',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  studentNumber: 'studentNumber',
  institutionId: 'institutionId',
  careerId: 'careerId',
  enrollmentDate: 'enrollmentDate',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  courseId: 'courseId',
  academicPeriodId: 'academicPeriodId',
  enrolledAt: 'enrolledAt',
  status: 'status'
};

exports.Prisma.StudentSubjectScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  subjectId: 'subjectId',
  classroomId: 'classroomId',
  semester: 'semester',
  year: 'year',
  finalGrade: 'finalGrade',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  studentSubjectId: 'studentSubjectId',
  type: 'type',
  weight: 'weight',
  value: 'value',
  comments: 'comments',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  classroomId: 'classroomId',
  date: 'date',
  status: 'status',
  notedById: 'notedById',
  note: 'note',
  createdAt: 'createdAt'
};

exports.Prisma.DisciplinaryRecordScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  subjectId: 'subjectId',
  recordedById: 'recordedById',
  type: 'type',
  description: 'description',
  actionTaken: 'actionTaken',
  date: 'date',
  seenByTutor: 'seenByTutor'
};

exports.Prisma.TutorProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  institutionId: 'institutionId',
  relationship: 'relationship',
  phone: 'phone',
  address: 'address',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.TutorStudentScalarFieldEnum = {
  id: 'id',
  tutorId: 'tutorId',
  studentId: 'studentId',
  isPrimary: 'isPrimary',
  assignedAt: 'assignedAt'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  courseId: 'courseId',
  subjectId: 'subjectId',
  type: 'type',
  issuedAt: 'issuedAt',
  fileUrl: 'fileUrl',
  issuedById: 'issuedById',
  metadata: 'metadata'
};

exports.Prisma.FeeScheduleScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  careerId: 'careerId',
  name: 'name',
  totalAmount: 'totalAmount',
  currency: 'currency',
  installments: 'installments',
  frequency: 'frequency',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.FeeInstallmentScalarFieldEnum = {
  id: 'id',
  feeScheduleId: 'feeScheduleId',
  sequence: 'sequence',
  dueDate: 'dueDate',
  amount: 'amount',
  createdAt: 'createdAt'
};

exports.Prisma.StudentPaymentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  institutionId: 'institutionId',
  feeInstallmentId: 'feeInstallmentId',
  amount: 'amount',
  currency: 'currency',
  method: 'method',
  status: 'status',
  reference: 'reference',
  gatewayData: 'gatewayData',
  paidAt: 'paidAt',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentPlanScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  feeScheduleId: 'feeScheduleId',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  remainingAmount: 'remainingAmount',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.AIAgentScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  type: 'type',
  name: 'name',
  personality: 'personality',
  specialization: 'specialization',
  maxTokensPerCall: 'maxTokensPerCall',
  temperature: 'temperature',
  systemPrompt: 'systemPrompt',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.AIConversationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  agentId: 'agentId',
  sessionId: 'sessionId',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  totalTokens: 'totalTokens',
  totalCost: 'totalCost'
};

exports.Prisma.AIMessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  role: 'role',
  content: 'content',
  tokens: 'tokens',
  createdAt: 'createdAt'
};

exports.Prisma.AIUsageLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  institutionId: 'institutionId',
  classroomId: 'classroomId',
  promptSummary: 'promptSummary',
  responseSummary: 'responseSummary',
  tokensUsed: 'tokensUsed',
  cost: 'cost',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  recipientId: 'recipientId',
  title: 'title',
  body: 'body',
  meta: 'meta',
  isRead: 'isRead',
  readAt: 'readAt',
  pushSent: 'pushSent',
  emailSent: 'emailSent',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  preferences: 'preferences',
  createdAt: 'createdAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  recipientId: 'recipientId',
  subject: 'subject',
  body: 'body',
  attachments: 'attachments',
  isRead: 'isRead',
  readAt: 'readAt',
  createdAt: 'createdAt'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  title: 'title',
  body: 'body',
  targetRoles: 'targetRoles',
  startsAt: 'startsAt',
  endsAt: 'endsAt',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.DataBackupScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  name: 'name',
  description: 'description',
  storageUrl: 'storageUrl',
  sizeBytes: 'sizeBytes',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.TemplateScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  name: 'name',
  type: 'type',
  body: 'body',
  metadata: 'metadata',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.IntegrationScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  name: 'name',
  config: 'config',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ApiClientScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  clientId: 'clientId',
  clientName: 'clientName',
  clientType: 'clientType',
  apiKeyHash: 'apiKeyHash',
  scopes: 'scopes',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ApiUsageLogScalarFieldEnum = {
  id: 'id',
  apiClientId: 'apiClientId',
  endpoint: 'endpoint',
  method: 'method',
  statusCode: 'statusCode',
  latencyMs: 'latencyMs',
  createdAt: 'createdAt'
};

exports.Prisma.ApiScopeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.WebhookScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  name: 'name',
  url: 'url',
  events: 'events',
  secret: 'secret',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.WebhookDeliveryScalarFieldEnum = {
  id: 'id',
  webhookId: 'webhookId',
  status: 'status',
  response: 'response',
  attempt: 'attempt',
  sentAt: 'sentAt',
  createdAt: 'createdAt'
};

exports.Prisma.ApiKeyRotationScalarFieldEnum = {
  id: 'id',
  apiClientId: 'apiClientId',
  keyHash: 'keyHash',
  createdAt: 'createdAt',
  revokedAt: 'revokedAt'
};

exports.Prisma.DashboardConfigScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  config: 'config',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeacherScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  bio: 'bio',
  specialties: 'specialties',
  hireDate: 'hireDate',
  createdAt: 'createdAt'
};

exports.Prisma.InstitutionLogScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  userId: 'userId',
  module: 'module',
  action: 'action',
  data: 'data',
  ip: 'ip',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  SUSPENDED: 'SUSPENDED',
  CANCELLED: 'CANCELLED',
  TRIAL: 'TRIAL'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CARD: 'CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  QR: 'QR',
  CASH: 'CASH',
  WALLET: 'WALLET',
  OTHER: 'OTHER'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED'
};

exports.RoleName = exports.$Enums.RoleName = {
  ADMIN: 'ADMIN',
  SECRETARY: 'SECRETARY',
  DIRECTOR: 'DIRECTOR',
  TEACHER: 'TEACHER',
  STUDENT: 'STUDENT',
  TUTOR: 'TUTOR',
  FINANCE: 'FINANCE',
  SUPPORT: 'SUPPORT'
};

exports.PolicyEffect = exports.$Enums.PolicyEffect = {
  ALLOW: 'ALLOW',
  DENY: 'DENY'
};

exports.LevelType = exports.$Enums.LevelType = {
  BASIC: 'BASIC',
  TECHNICAL: 'TECHNICAL',
  BACHELOR: 'BACHELOR',
  MASTER: 'MASTER',
  DOCTORATE: 'DOCTORATE',
  OTHER: 'OTHER'
};

exports.StudentStatus = exports.$Enums.StudentStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  GRADUATED: 'GRADUATED',
  WITHDRAWN: 'WITHDRAWN',
  SUSPENDED: 'SUSPENDED'
};

exports.GradeType = exports.$Enums.GradeType = {
  EXAM: 'EXAM',
  QUIZ: 'QUIZ',
  HOMEWORK: 'HOMEWORK',
  PROJECT: 'PROJECT',
  FINAL: 'FINAL'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT',
  LATE: 'LATE',
  EXCUSED: 'EXCUSED'
};

exports.CertificateType = exports.$Enums.CertificateType = {
  SUBJECT: 'SUBJECT',
  COURSE: 'COURSE',
  PROGRAM: 'PROGRAM'
};

exports.Prisma.ModelName = {
  Plan: 'Plan',
  Institution: 'Institution',
  InstitutionSubscription: 'InstitutionSubscription',
  InstitutionPayment: 'InstitutionPayment',
  User: 'User',
  Role: 'Role',
  UserRole: 'UserRole',
  ABACPolicy: 'ABACPolicy',
  Career: 'Career',
  AcademicPeriod: 'AcademicPeriod',
  Course: 'Course',
  Subject: 'Subject',
  VirtualClassroom: 'VirtualClassroom',
  LessonPlan: 'LessonPlan',
  Student: 'Student',
  Enrollment: 'Enrollment',
  StudentSubject: 'StudentSubject',
  Grade: 'Grade',
  Attendance: 'Attendance',
  DisciplinaryRecord: 'DisciplinaryRecord',
  TutorProfile: 'TutorProfile',
  TutorStudent: 'TutorStudent',
  Certificate: 'Certificate',
  FeeSchedule: 'FeeSchedule',
  FeeInstallment: 'FeeInstallment',
  StudentPayment: 'StudentPayment',
  PaymentPlan: 'PaymentPlan',
  AIAgent: 'AIAgent',
  AIConversation: 'AIConversation',
  AIMessage: 'AIMessage',
  AIUsageLog: 'AIUsageLog',
  Notification: 'Notification',
  NotificationPreference: 'NotificationPreference',
  Message: 'Message',
  Announcement: 'Announcement',
  DataBackup: 'DataBackup',
  Template: 'Template',
  Integration: 'Integration',
  ApiClient: 'ApiClient',
  ApiUsageLog: 'ApiUsageLog',
  ApiScope: 'ApiScope',
  Webhook: 'Webhook',
  WebhookDelivery: 'WebhookDelivery',
  ApiKeyRotation: 'ApiKeyRotation',
  DashboardConfig: 'DashboardConfig',
  Teacher: 'Teacher',
  InstitutionLog: 'InstitutionLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
